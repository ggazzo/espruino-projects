{"version":3,"file":"main.js","mappings":"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","sources":["webpack://tspruino-quickstart/./src/definitions.ts","webpack://tspruino-quickstart/./src/heating.machine.ts","webpack://tspruino-quickstart/./src/kalmanFilter.ts","webpack://tspruino-quickstart/./src/machine.ts","webpack://tspruino-quickstart/./src/pid.ts","webpack://tspruino-quickstart/./src/thermistor.ts","webpack://tspruino-quickstart/webpack/bootstrap","webpack://tspruino-quickstart/webpack/runtime/define property getters","webpack://tspruino-quickstart/webpack/runtime/hasOwnProperty shorthand","webpack://tspruino-quickstart/webpack/runtime/make namespace object","webpack://tspruino-quickstart/./src/main.ts"],"sourcesContent":["export const pins = {\n\ttemperature: 0,\n\theater: 1,\n\tledP: D13,\n};\n","import { FiniteStateMachine } from './machine';\n\nexport const heatingMachine = new FiniteStateMachine<\n\t{\n\t\ttemperature: number;\n\t\tcounter_measurement: number;\n\t\toutput: number;\n\t},\n\t{ type: 'READ_TEMPERATURE'; temperature: number }\n>({\n\tinitial: 'idle',\n\tcontext: {\n\t\ttemperature: 0,\n\t\tcounter_measurement: 0,\n\t\toutput: 0,\n\t},\n\tstates: {\n\t\tidle: {\n\t\t\tonEnter: context => {\n\t\t\t\tconsole.log('Entering idle state');\n\t\t\t},\n\t\t\tonExit: context => {\n\t\t\t\tconsole.log('Exiting idle state');\n\t\t\t},\n\t\t\ttransitions: {},\n\t\t},\n\t\t// pid: {},\n\t\theating: {\n\t\t\tonExit(context, event) {\n\t\t\t\tcontext.counter_measurement = 0;\n\t\t\t},\n\t\t\ttransitions: {\n\t\t\t\tREAD_TEMPERATURE: {\n\t\t\t\t\ttarget: 'pid',\n\t\t\t\t\tcond: (context, event) => context.counter_measurement++ > 10,\n\t\t\t\t},\n\t\t\t\tSTOP: {\n\t\t\t\t\ttarget: 'idle',\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n});\n","export class KalmanFilter {\n\tprivate errMeasure: number;\n\tprivate errEstimate: number;\n\tprivate q: number;\n\tprivate kalmanGain: number = 0;\n\tprivate currentEstimate: number = 0;\n\tprivate lastEstimate: number = 0;\n\n\tconstructor(meaE: number, estE: number, q: number) {\n\t\tthis.errMeasure = meaE;\n\t\tthis.errEstimate = estE;\n\t\tthis.q = q;\n\t}\n\n\tupdateEstimate(mea: number): number {\n\t\tthis.kalmanGain = this.errEstimate / (this.errEstimate + this.errMeasure);\n\t\tthis.currentEstimate = this.lastEstimate + this.kalmanGain * (mea - this.lastEstimate);\n\t\tthis.errEstimate =\n\t\t\t(1.0 - this.kalmanGain) * this.errEstimate +\n\t\t\tMath.abs(this.lastEstimate - this.currentEstimate) * this.q;\n\t\tthis.lastEstimate = this.currentEstimate;\n\t\treturn this.currentEstimate;\n\t}\n\n\tsetMeasurementError(meaE: number): void {\n\t\tthis.errMeasure = meaE;\n\t}\n\n\tsetEstimateError(estE: number): void {\n\t\tthis.errEstimate = estE;\n\t}\n\n\tsetProcessNoise(q: number): void {\n\t\tthis.q = q;\n\t}\n\n\tgetKalmanGain(): number {\n\t\treturn this.kalmanGain;\n\t}\n}\n","    /**\n * Finite State Machine implementation in TypeScript\n * \n * This implementation provides a flexible and type-safe way to create and\n * manage state machines with strong typing support for states, events, and context.\n */\n\n// Define types for the state machine\nexport type StateConfig<TContext, TEvent> = {\n    // Actions that run when entering this state\n    onEnter?: (context: TContext, event?: TEvent) => void;\n    // Actions that run when exiting this state\n    onExit?: (context: TContext, event?: TEvent) => void;\n    // Transitions to other states\n    transitions: {\n      [eventType: string]: {\n        target: string;\n        // Guard condition that must be true for the transition to occur\n        cond?: (context: TContext, event: TEvent) => boolean;\n        // Actions to run during the transition\n        actions?: (context: TContext, event: TEvent) => void;\n      };\n    };\n  };\n  \n  export type MachineConfig<TContext, TEvent> = {\n    // The initial state of the machine\n    initial: string;\n    // The context (data) shared across all states\n    context: TContext;\n    // The states of the machine\n    states: {\n      [state: string]: StateConfig<TContext, TEvent>;\n    };\n  };\n  \n  export class FiniteStateMachine<\n    TContext extends Record<string, any> = Record<string, any>,\n    TEvent extends { type: string } = { type: string }\n  > {\n    private currentState: string;\n    private config: MachineConfig<TContext, TEvent>;\n    private context: TContext;\n  \n    /**\n     * Create a new finite state machine\n     * @param config The configuration for the state machine\n     */\n    constructor(config: MachineConfig<TContext, TEvent>) {\n      this.config = config;\n      this.context = { ...config.context };\n      this.currentState = config.initial;\n      \n      // Run onEnter for the initial state if it exists\n      const initialState = this.config.states[this.currentState];\n      if (initialState?.onEnter) {\n        initialState.onEnter(this.context);\n      }\n    }\n  \n    /**\n     * Send an event to the state machine to trigger a transition\n     * @param event The event to send\n     * @returns The current state after processing the event\n     */\n    public send(event: TEvent): string {\n      const currentStateConfig = this.config.states[this.currentState];\n      \n      // Check if there's a transition for this event\n      const transition = currentStateConfig.transitions[event.type];\n      \n      if (!transition) {\n        console.warn(`No transition found for event ${event.type} in state ${this.currentState}`);\n        return this.currentState;\n      }\n  \n      // Check if the guard condition passes (if there is one)\n      if (transition.cond && !transition.cond(this.context, event)) {\n        return this.currentState;\n      }\n  \n      // Run exit actions for current state\n      if (currentStateConfig.onExit) {\n        currentStateConfig.onExit(this.context, event);\n      }\n  \n      // Run transition actions\n      if (transition.actions) {\n        transition.actions(this.context, event);\n      }\n  \n      // Update current state\n      const previousState = this.currentState;\n      this.currentState = transition.target;\n  \n      // Run entry actions for new state\n      const nextStateConfig = this.config.states[this.currentState];\n      if (nextStateConfig.onEnter) {\n        nextStateConfig.onEnter(this.context, event);\n      }\n  \n      console.log(`Transition: ${previousState} -> ${this.currentState} (${event.type})`);\n      \n      return this.currentState;\n    }\n  \n    /**\n     * Get the current state of the machine\n     */\n    public getState(): string {\n      return this.currentState;\n    }\n  \n    /**\n     * Get the current context of the machine\n     */\n    public getContext(): TContext {\n      return { ...this.context };\n    }\n  \n    /**\n     * Update the context of the machine\n     * @param contextUpdate A partial context object to merge with the current context\n     */\n    public updateContext(contextUpdate: Partial<TContext>): void {\n      this.context = { ...this.context, ...contextUpdate };\n    }\n  \n    /**\n     * Check if the machine is in a specific state\n     * @param state The state to check\n     */\n    public matches(state: string): boolean {\n      return this.currentState === state;\n    }\n  }","export class PID {\n\tprivate pOnM: boolean;\n\tprivate pOnE: boolean;\n\tprivate pOnEKp: number;\n\tprivate pOnMKp: number;\n\n\tprivate output: number = 0;\n\tprivate integral: number = 0;\n\tprivate lastInput: number = 0;\n\n\tconstructor(\n\t\tprivate controllerDirection: boolean,\n\t\tprivate kp: number,\n\t\tprivate ki: number,\n\t\tprivate kd: number,\n\t\tprivate setpoint: number,\n\t\tprivate maxOutput: number,\n\t\tprivate minOutput: number,\n\t\tpOn: number,\n\t) {\n\t\tthis.setTunings(kp, ki, kd, pOn);\n\t}\n\n\tsetTunings(kp: number, ki: number, kd: number, pOn: number): void {\n\t\tif (kp < 0 || ki < 0 || kd < 0 || pOn < 0 || pOn > 1) return;\n\n\t\tthis.pOnE = pOn > 0; // some p on error is desired\n\t\tthis.pOnM = pOn < 1; // some p on measurement is desired\n\n\t\tthis.kp = this.controllerDirection ? kp : -kp;\n\t\tthis.ki = this.controllerDirection ? ki : -ki;\n\t\tthis.kd = this.controllerDirection ? kd : -kd;\n\n\t\tthis.pOnEKp = pOn * this.kp;\n\t\tthis.pOnMKp = (1 - pOn) * this.kp;\n\t}\n\n\tcompute(input: number, timeChange_sec: number): number {\n\t\tconst now = Date.now();\n\n\t\tconst error = this.setpoint - input;\n\t\tconst derivative = input - this.lastInput;\n\n\t\tthis.integral += this.ki * error * timeChange_sec;\n\n\t\tif (this.pOnM) this.integral -= this.pOnMKp * derivative;\n\n\t\t// constrain\n\t\tthis.integral = Math.max(this.minOutput, Math.min(this.maxOutput, this.integral));\n\t\tthis.output = this.pOnEKp * error + this.integral - (this.kd * derivative) / timeChange_sec;\n\n\t\tthis.lastInput = input;\n\n\t\treturn this.output;\n\t}\n\n\tsetSetpoint(setpoint: number): void {\n\t\tthis.setpoint = setpoint;\n\t}\n}\n","export class Thermistor {\n\tprivate pin: Pin;\n\tconstructor(\n\t\tpin: number,\n\t\tprivate beta: number = 3950,\n\t\tprivate r0: number = 10000,\n\t\tprivate t0: number = 25,\n\t\tprivate rSeries: number = 100000,\n\t\tprivate voltageReference: number = 3.3,\n\t) {\n\t\tthis.pin = new Pin(pin);\n\t}\n\n\tprivate readTemperature(pin, beta, r0, t0, rSeries, voltageReference = 3.3): number {\n\t\tvar adc = analogRead(pin); // Read ADC value (0 to 1)\n\t\tvar v = adc * voltageReference; // Convert to voltage (assuming 3.3V system)\n\n\t\t// Convert voltage to resistance\n\t\tvar rThermistor = rSeries * (v / (voltageReference - v));\n\n\t\t// Convert resistance to temperature using the Steinhart-Hart equation\n\t\tvar tKelvin = 1 / (1 / (t0 + 273.15) + (1 / beta) * Math.log(rThermistor / r0));\n\t\tvar tCelsius = tKelvin - 273.15; // Convert to Celsius\n\n\t\treturn tCelsius;\n\t}\n\n\tgetTemp(): number {\n\t\treturn this.readTemperature(\n\t\t\tthis.pin,\n\t\t\tthis.beta,\n\t\t\tthis.r0,\n\t\t\tthis.t0,\n\t\t\tthis.rSeries,\n\t\t\tthis.voltageReference,\n\t\t);\n\t}\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { pins } from './definitions';\nimport { heatingMachine } from './heating.machine';\nimport { KalmanFilter } from './kalmanFilter';\nimport { map } from './map';\nimport { PID } from './pid';\nimport { Thermistor } from './thermistor';\n\nconst pid = new PID(true, 0.1, 0.01, 0.001, 0, 255, 0, 1);\nconst sensor = new Thermistor(pins.temperature);\nconst filter = new KalmanFilter(2, 2, 0.01);\n\nconst heater = new Pin(pins.heater);\n\nconst readTemperature = () => filter.updateEstimate(sensor.getTemp());\n\nlet lastElapsed = 0;\n\n// actor.subscribe(state => {\n// \tswitch (true) {\n// \t\tcase state.matches('pid'): {\n// \t\t\tconst now = Date.now();\n// \t\t\tconst temperature = readTemperature();\n// \t\t\tconst output = pid.compute(temperature, (now - lastElapsed) / 1000);\n// \t\t\tactor.send({ type: 'DONE', output });\n// \t\t\tlastElapsed = now;\n// \t\t}\n// \t\tcase state.matches('heating'): {\n// \t\t\theater.pwm(map(state.context.output, 0, 255, 0, 1));\n// \t\t}\n// \t\tcase state.matches('normal'): {\n// \t\t\theater.pwm(0);\n// \t\t}\n// \t}\n// });\n\nsetInterval(() => {\n\tconsole.log('asdasda');\n\theatingMachine.send({ type: 'READ_TEMPERATURE', temperature: readTemperature() });\n}, 10);\n"],"names":["pins","temperature","heater","ledP","D13","FiniteStateMachine","heatingMachine","initial","context","counter_measurement","output","states","idle","onEnter","console","log","onExit","transitions","heating","event","READ_TEMPERATURE","target","cond","STOP","KalmanFilter","kalmanGain","currentEstimate","lastEstimate","constructor","meaE","estE","q","errMeasure","errEstimate","updateEstimate","mea","Math","abs","setMeasurementError","setEstimateError","setProcessNoise","getKalmanGain","config","currentState","initialState","send","currentStateConfig","transition","type","warn","actions","previousState","nextStateConfig","getState","getContext","updateContext","contextUpdate","matches","state","PID","integral","lastInput","controllerDirection","kp","ki","kd","setpoint","maxOutput","minOutput","pOn","setTunings","pOnE","pOnM","pOnEKp","pOnMKp","compute","input","timeChange_sec","now","Date","error","derivative","max","min","setSetpoint","Thermistor","pin","beta","r0","t0","rSeries","voltageReference","Pin","readTemperature","adc","analogRead","v","rThermistor","tKelvin","tCelsius","getTemp","pid","sensor","filter","lastElapsed","setInterval"],"sourceRoot":""}